@using Microsoft.Data.SqlClient;
@using PATHSMap.Data;
@using Microsoft.Data.Sql;
@using System.Data;
@using Microsoft.Extensions.Configuration;
@page "/"




<PageTitle>PATHS Map</PageTitle>
<head>
    <style>
        h1 {
            padding: 3vh;
            text-align: center;
            border: 3px;
            background-color: black;
            color: aliceblue;
        }

        article {
            max-width: auto;
            display: flex;
            justify-content: center;
            background-color: black;
        }
    </style>
</head>
<body>
    <h1>PATHS Map</h1>
    
        <article>
            
            <Map width="85vh" height="800px"
             Parameters="parameters"
             GeoJSON_strings=@currentgeojson.ToArray()>
            </Map>
            
        
            
        </article>
    
</body>

@code {
    //map initialization parameters
    Map.LoadParameters parameters = new Map.LoadParameters()
        {
            location = new Map.Location()
            {
                longitude = -88.311486,
                latitude = 36.961028

            },
            map_scale = new Map.MapScale()
            {
                has = true,
                meters = false,
                miles = true
            },
            zoom_level = 5
        };
     
    private IEnumerable<Storm> storms = new List<Storm>();
    public List<string> currentgeojson = new List<string> { };

    protected override async Task OnInitializedAsync()
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();
        string connString = config.GetConnectionString("DefaultConnection");
        IDbConnection conn = new SqlConnection(connString);
        {
            var strlist = new List<string>();
            var stormRepo = new StormRepository(conn);
            storms = stormRepo.GetAllStorms();
            foreach (var v in storms)
            {
                currentgeojson.Add(v.geometry);
            }

            
            var join = string.Join(",", currentgeojson);
            
            Console.WriteLine(join);

        }

        while (true)
        {
            await Task.Delay(5000);

            conn = new SqlConnection(connString);
            {
                var stormRepo = new StormRepository(conn);
                storms = stormRepo.GetAllStorms();
                
                StateHasChanged();
            }
        }
    }
}