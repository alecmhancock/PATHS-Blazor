@using Microsoft.Data.SqlClient;
@using PATHSMap.Data;
@using Microsoft.Data.Sql;
@using System.Data;
@using Microsoft.Extensions.Configuration;
@page "/"

<link href="Index.razor.css" rel="stylesheet">
<PageTitle>Home</PageTitle>
<body>

    <MudText Class="mt-5 mb-5" Typo="Typo.h2" Align="Align.Center">Active Storms</MudText>
    <MudText Class="mb-10" Typo="Typo.h5" Align="Align.Center">Last updated at @lastInquiryTime</MudText>
    <div class="cards">
        <MudExpansionPanels MultiExpansion="true">
            @foreach (var storm in storms)
            {
                <MudExpansionPanel Text="@storm.headline">
                    @storm.description
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </div>
</body>



@code {

    public string ReadOnly { get; set; }
    private IEnumerable<Storm> storms = new List<Storm>();
    public string lastInquiryTime = "";

    protected override async Task OnInitializedAsync()
    {
        //DB Callout for active storms
        var config = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile("appsettings.json")
        .Build();
        string connString = config.GetConnectionString("DefaultConnection");
        IDbConnection conn3 = new SqlConnection(connString);
        {
            var stormRepo = new StormRepository(conn3);
            storms = stormRepo.GetAllStorms();
            lastInquiryTime = DateTime.Now.ToString("h:mm:ss tt");
        }

        while (true)
        {   //logic to refresh page on new storm discovery
            await Task.Delay(5000);

            conn3 = new SqlConnection(connString);
            {
                var stormRepo = new StormRepository(conn3);
                storms = stormRepo.GetAllStorms();
                lastInquiryTime = DateTime.Now.ToString("h:mm:ss tt");
                StateHasChanged();
            }
        }
    }
}


